#+title: Emacs config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
#+startup: content

* Table of Contents :TOC:
- [[#notes-to-self][Notes to self]]
- [[#startup-performance][Startup performance]]
- [[#package-management][Package management]]
- [[#prevent-littering][Prevent littering]]
- [[#basic-ui][Basic UI]]
  - [[#disable-bell][disable bell]]
  - [[#line-numbers][line numbers]]
  - [[#fonts][fonts]]
  - [[#improved-scrolling][improved scrolling]]
  - [[#transparency][transparency]]
- [[#basic-functionality][Basic functionality]]
  - [[#all-the-icons][all-the-icons]]
  - [[#auto-update-packages][auto-update packages]]
- [[#keybindings][Keybindings]]
  - [[#make-escape-quit][make escape quit]]
  - [[#evil-mode][evil-mode]]
  - [[#undo-tree][undo-tree]]
  - [[#generalel][general.el]]
  - [[#generalel-generic-binds][general.el generic binds]]
  - [[#hydra][hydra]]
  - [[#window-management][window management]]
  - [[#buffer-management][buffer management]]
- [[#ui-configuration][UI Configuration]]
  - [[#ivy--counsel][ivy + counsel]]
  - [[#doom-themes][doom-themes]]
  - [[#doom-modeline][doom-modeline]]
  - [[#rainbow-delimiters][rainbow-delimiters]]
  - [[#modus-themes][modus-themes]]
  - [[#which-key][which-key]]
  - [[#helpful][helpful]]
  - [[#help-keybinds][help keybinds]]
- [[#org][Org]]
  - [[#org-fonts][org-fonts]]
  - [[#org--agenda][org + agenda]]
  - [[#bullets][bullets]]
  - [[#side-padding][side-padding]]
  - [[#org-babel][org-babel]]
  - [[#table-of-contents][table of contents]]
- [[#development][Development]]
  - [[#lsp-mode][lsp-mode]]
  - [[#languages][languages]]
  - [[#company-mode][company mode]]
  - [[#projectile][projectile]]
  - [[#magit][magit]]
  - [[#commenting][Commenting]]
- [[#terminal][Terminal]]
  - [[#term-mode][term-mode]]
  - [[#vterm][vterm]]
  - [[#shell-mode][shell-mode]]
  - [[#shell-pop][shell-pop]]
  - [[#eshell][Eshell]]
- [[#files][Files]]
  - [[#dired][Dired]]
- [[#programs][Programs]]
  - [[#ement][ement]]
  - [[#elfeed][elfeed]]
  - [[#erc][erc]]
- [[#applications][Applications]]
  - [[#xmodmap][Xmodmap]]
  - [[#mpv][mpv]]
  - [[#zshrc][zshrc]]
  - [[#firejail][Firejail]]
- [[#special][Special]]
- [[#runtime-performance][Runtime performance]]

* Notes to self

Emacs Config

+ C-x C-e to eval at point
+ M-: to eval variable
+ M-o in list for options
+ C-w window management
+ evil C-o to go back to prev location!

+ check-parens to check for errors
+ emacs-lisp-mode-map for viewing local keybinds

+ :mkdirp yes to create directories when tangling... disabled?
+ How does :noweb work?
+ keybind to search toc for link?

Q's
+ auto-revert-mode -- updates file when it changes on disk. use in some modes/files?
+ package-initialize

Look into:
- Meow since C-j and C-k will be hard in dvorak (could use alt. keys or replace?)

Reduce Emacs startup time:
- :hook
- :bind
- :commands
- :mode
- :after
- :defer

To update:
- hydra
  
* Startup performance

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes (measured in bytes)
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun ri/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                       (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'ri/display-startup-time)
    
#+end_src

* Package management

package management, sources, auto, etc

#+begin_src emacs-lisp 

  ;; Package sources ----
  (require 'package) ; package management functions (autoloaded?)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize) ; initialize package system and prep to be used

  ;; if package-archive-contents is empty (fresh install), ----
  ;;   run package-refresh-contents. 
  (unless package-archive-contents 
   (package-refresh-contents)) 

  ;; non-Linux setup use-package ----
  ;; if use-package isn't installed or new update, then package-install it
  (unless (package-installed-p 'use-package) 
     (package-install 'use-package)) 

  ;; setup use-package ----
  (require 'use-package) 
  (setq use-package-always-ensure t) ;; no need to add :ensure t on every package that needs it
  ;(setq use-package-always-defer t) ;; explicitly state which to ensure, might break, save first
  (setq use-package-verbose t)

#+end_src

* Prevent littering

#+begin_src emacs-lisp

  ;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
        url-history-file (expand-file-name "url/history" user-emacs-directory))

  ;; no-littering
  (use-package no-littering)

  ;; keep autosaves in emacs dir
  (setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

* Basic UI

Basic configuration of user interface.
Includes:
+ disable bell
+ line numbers
+ fonts
+ improved scrolling
+ transparency

#+begin_src emacs-lisp 
  ;; disable startup screen
  (setq inhibit-startup-message nil) 

  ;; disable ui 
  (scroll-bar-mode -1) ; disable visible scrollbar
  (tool-bar-mode -1)   ; disable the toolbar
  (tooltip-mode 1)     ; disable tooltips
  (set-fringe-mode 10) ; give some breathing room
  (menu-bar-mode -1)   ; disable menu bar

#+end_src

** disable bell

#+begin_src emacs-lisp

;; disable bell
(setq ring-bell-function 'ignore) ; TURN OFF ONCE AND FOR ALL?
(setq visual-bell 1) 

#+end_src

** line numbers

#+begin_src emacs-lisp

  ;; add line numbers
  (global-display-line-numbers-mode t)
  (column-number-mode) ; (columns on modeline)

  ;; line number mode exceptions
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  treemacs-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** fonts

General fonts for emacs.
(bullets are configured in org-fonts: [[#org-fonts]] )

#+begin_src emacs-lisp

  ;; default font (modeline, minibuffer, default for applications, etc)
  (set-face-attribute 'default nil :font "Fira Code" :height 110)
  ;(set-face-attribute 'default nil :font "JetBrains Mono" :height 115) 

  ;; fixed pitch font (code blocks, property, startup, etc (can add more))
  (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height 110)

  ;; variable pitch font (toc links, regular text in org, etc...)
  ;; how about Iosveka instead? 
  ;; (bullets are configured in org-fonts)
  (set-face-attribute 'variable-pitch nil :font "DejaVu Sans" :height 120 :weight 'regular)

#+end_src 

** improved scrolling

#+begin_src emacs-lisp

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed t) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  (setq use-dialog-box t) ;; (change to nil) Disable dialog boxes since they weren't working in Mac OSX
  
#+end_src

** transparency

#+begin_src emacs-lisp

  ;; Set frame transparency and maximize windows by default. 
  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

* Basic functionality

basic functionality 

** all-the-icons

#+begin_src emacs-lisp

  ;; all-the-icons
  ;; note: on a new machine, must run M-x all-the-icons-install-fonts
  (use-package all-the-icons)

#+end_src

** auto-update packages

+ M-x auto-update-package-now to run immediately
+ Updates can break Emacs, so only update when 

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results nil) ; hide pane to see what packages were updated
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "15:00"))

#+end_src

* Keybindings

Set keybind related things here.
Includes:
+ global-set-key (<escape> as quit)
+ evil-mode
+ general.el
+ hydra
+ window management
+ buffer management
  
** make escape quit

Make <escape> quit.

#+begin_src emacs-lisp

  ;; ESC to quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** evil-mode

#+begin_src emacs-lisp

  ;; evil-mode exclude
  (defun ri/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    circe-query-mode
                    sauron-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

  ;; evil-mode
  (use-package evil
    :init
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump t)
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-tree)
    :config
    (add-hook 'evil-mode-hook 'ri/evil-hook)
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join) ; wowie

    ;; Use visual line motions even outside of visual-line-mode buffers
    ;; -- haven't set up visual line mode yet
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
    ;:hook
    ;; have these programs be in emacs-mode (C-z)
    ;(evil-mode-hook . mi/evil-hook)

  ;; evil collections
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init)) 

#+end_src

** undo-tree

https://github.com/apchamberlain/undo-tree.el

#+begin_src emacs-lisp

  ;; undo-tree for evil-undo
  (use-package undo-tree
    :after evil
    :init
    (global-undo-tree-mode 1)
    :config
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.gnu/undo"))))

#+end_src

** general.el

https://github.com/noctuid/general.el

#+begin_src emacs-lisp

  ;; general.el
  (use-package general
    :after evil
    :config
    (general-evil-setup t)

    ;; the definer can be called to add new keybinds.
    ;; far, far better than using a bunch of
    ;;   global-set-key or define-key.
    ;; (keymaps can be swapped with states)
    (general-create-definer ri/leader-keys
      :states '(normal insert visual emacs)
      ;:keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    ;; ;; the modes under keymaps can be put under states, right?
    ;; (general-create-definer ri/leader-keys-mode-map
    ;;   :states '(normal insert visual emacs)
    ;;   :prefix "SPC"
    ;;   :global-prefix "C-SPC")

    (general-create-definer ri/ctrl-c-keys
      :prefix "C-c"))

#+end_src

** general.el generic binds

Generic toggles

#+begin_src emacs-lisp

  (ri/leader-keys
    "t" '(:ignore t :which-key "toggles"))

#+end_src

Quit emacs / session

#+begin_src emacs-lisp

  (ri/leader-keys
    "q"  '(:ignore t :which-key "quit/session")
    "qq" '(save-buffers-kill-terminal :which-key "quit emacs"))

#+end_src

** hydra

Fast, transient keybinds

#+begin_src emacs-lisp

  ;; hydra (fast, transient keybinds)
  (use-package hydra
    :defer t)

  (defhydra hydra-text-scale (:timeout 5) 
    "scale text"
    ("j" text-scale-decrease "out")
    ("k" text-scale-increase "in")
    ("f" nil "finished" :exit t))

  (ri/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

** window management

#+begin_src emacs-lisp

  (ri/leader-keys
    "w"  '(:ignore t :which-key "window")
    "wv" '(evil-window-vsplit :which-key "v-split")
    "ws" '(evil-window-split :which-key "h-split")
    "wd" '(evil-window-delete :which-key "close window")
    "wc" '(evil-window-delete :which-key "close window")
    "ww" '(evil-window-next :which-key "next-window")
    "wW" '(evil-window-prev :which-key "prev-window")
    "wh" '(evil-window-left :which-key "window-left")
    "wj" '(evil-window-down :which-key "window-down")
    "wk" '(evil-window-up :which-key "window-up")
    "wl" '(evil-window-right :which-key "window-right")
    "wH" '(evil-window-move-far-left :which-key "move left")
    "wJ" '(evil-window-move-very-bottom :which-key "move down")
    "wK" '(evil-window-move-very-top :which-key "move up")
    "wL" '(evil-window-move-far-right :which-key "move right")
    "wa" '(hydra-window-adjust/body :which-key "window-ratio-adjust")
    "wi" '(:ignore t :which-key "minibuffer")
    "wie" 'minibuffer-keyboard-quit
    "wio" 'switch-to-minibuffer)

  (defhydra hydra-window-adjust (:timeout 5)
    "adjust window split ratio"
    ("h" shrink-window-horizontally "left")
    ("j" enlarge-window "down")
    ("k" shrink-window "up")
    ("l" enlarge-window-horizontally "right")
    ("c" balance-windows "balance")
    ("<enter>" nil "finished" :exit t)
    ("f" nil "finished" :exit t))

#+end_src

** buffer management

#+begin_src emacs-lisp

  (ri/leader-keys
    "b" '(:ignore t :which-key "buffer")
    "bk" '(kill-this-buffer :which-key "kill buffer")
    "bn" 'next-buffer
    "bp" 'previous-buffer
    "bo" 'evil-switch-to-windows-last-buffer
    "bb" 'counsel-switch-buffer)

#+end_src

* UI Configuration

Here we have the UI configuration.
Includes:
+ ivy
+ counsel
+ doom-themes
+ doom-modeline
+ rainbow-delimiters
+ which-key
+ helpful
+ help menu

** ivy + counsel

#+begin_src emacs-lisp

  ;; ivy
  (use-package ivy
    :diminish ; hide ivy minor-mode on modeline
    :bind (("C-s" . swiper) ;; fuzzy search tool
           :map ivy-minibuffer-map 
           ("TAB" . ivy-alt-done)	
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (message "Ivy got loaded!")
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  ;; counsel 
  (use-package counsel
    :bind (;("M-x" . counsel-M-x)
           ;("C-x b" . counsel-ibuffer)
           ;("C-x C-f" . counsel-find-file)
           ("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (setq ivy-initial-inputs-alist nil) ;; Don't start searches with ^
    (message "Counsel loaded!")
    (counsel-mode 1))

  ;; ivy completion regex and order by last used
  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))

#+end_src

** doom-themes

#+begin_src emacs-lisp

  ;; doom-themes
  ;; recommended: henna, palenight, snazzy
  (use-package doom-themes
    :init 
    (load-theme 'doom-dracula t))
    ;;(load-theme 'doom-monokai-spectrum t))
    ;;(load-theme 'doom-snazzy t))

  (defun ri/load-theme-and-font-setup ()
    (interactive)
    (counsel-load-theme)
    (ri/org-font-setup))

  (ri/leader-keys
    "ht" '(ri/load-theme-and-font-setup :which-key "choose theme"))

#+end_src

** doom-modeline

#+begin_src emacs-lisp

;; doom-modeline
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom (doom-modeline-height 40))

#+end_src

** rainbow-delimiters

#+begin_src emacs-lisp

;; rainbow delimiters
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** modus-themes

#+begin_src emacs-lisp

  ;; (use-package modus-themes
  ;;   :custom
  ;;   ;(modus-themes-mode-line '(borderless))
  ;;   :config
  ;;   (load-theme 'modus-vivendi t))

#+end_src

** which-key

Shows all possible completions for prefixes (C-c, C-x, SPC, etc)

https://github.com/justbur/emacs-which-key

#+begin_src emacs-lisp

  ;; which-key (lists keybinds)
  ;; (add links above source blocks later)
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode) 
    (setq which-key-idle-delay 0.3))

#+end_src

** helpful

Shows more info in help menu

#+begin_src emacs-lisp

  ;; helpful (improves help menu)
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind ;; change the function of the command
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key)) 

#+end_src

** help keybinds

#+begin_src emacs-lisp

  (ri/leader-keys
    "h" '(:ignore t :which-key "help")
    "hf" 'describe-function
    "hv" 'describe-variable
    "hk" 'describe-key
    ;"hb" 'describe-bindings
    "hb" 'counsel-descbinds
    "hm" 'describe-mode
    "hg" 'customize-group
    "hP" 'describe-package
    "hp" 'helpful-at-point)

#+end_src

* Org

Configuration for org-mode
Includes:
+ org-fonts
+ bullets, side-padding, tangle, toc, etc.

** org-fonts

maybe move org-fonts below org-mode, then have a use-package org inside it to run ri/org-font-setup...

#+begin_src emacs-lisp

  (defun ri/org-font-setup ()
    (interactive)
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      ;; font for bullets
      (set-face-attribute (car face) nil :font "Fira Code" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

#+end_src

** org + agenda

agenda query (custom-agenda-views) documentation: https://orgmode.org/manual/Custom-Agenda-Views.html#Custom-Agenda-Views

org agenda stuff
- when in agenda-commands view, C-n and C-p to move up and down
  - how to move up and down in other views? change size so can see more?

to add tags to a heading,
 - counsel-org-tag
   - (M-<enter> to add and continue)

#+begin_src emacs-lisp

  ;; org
  (defun ri/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (ri/leader-keys
    "o"  '(:ignore t :which-key "org")
    "ox" '(eval-last-sexp :which-key "eval-last-sexp")
    "oX" '(eval-region :which-key "eval-region"))

  (use-package org
    :commands (org-capture org-agenda)
    :hook (org-mode . ri/org-mode-setup)
    ;:custom ; do all setq's go in custom?
    :config
    (message "Org Mode loaded!")

    (setq org-ellipsis " ▼")
    (setq org-hide-emphasis-markers t) ; hide formatting chars
    (setq doom-modeline-enable-word-count t)

    ;; org-agenda ----
    (setq org-deadline-warning-days 14)
    (setq org-agenda-start-with-log-mode t) ; enable log-mode by def
    (setq org-log-done 'time)
    (setq org-log-into-drawer t) ; ?

    ;; agenda files ----
    (setq org-agenda-files
          '("~/org/agenda/agenda.org"
            "~/org/agenda/work.org"
            "~/org/agenda/habits.org"))

    ;; todo keywords ----
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    ;; org-refile ----
    ;; (add target locations for org-refile)
    (setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)
        ("work.org" :maxlevel . 1)))
    ;; save org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    ;; org-habit ----
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    ;; commonly known tasks to appear when counsel-org-tag ----
    ;; org-set-tags-command ?
    (setq org-tag-alist
      '((:startgroup)
        ; Put mutually exclusive tags here
        (:endgroup)
        ("@errand" . ?E)
        ("@home" . ?H)
        ("@work" . ?W)
        ("agenda" . ?a)
        ("planning" . ?p)
        ("publish" . ?P)
        ("batch" . ?b)
        ("note" . ?n)
        ("idea" . ?i)))

    ;; Custom Agenda Views! ----
    ;; (easier with org-ql)
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

       ("n" "Next Tasks"
        ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

       ("W" "Work Tasks" tags-todo "+work-email")

       ;; Low-effort next actions
       ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
        ((org-agenda-overriding-header "Low Effort Tasks")
         (org-agenda-max-todos 20)
         (org-agenda-files org-agenda-files)))

       ("w" "Workflow Status"
        ((todo "WAIT"
               ((org-agenda-overriding-header "Waiting on External")
                (org-agenda-files org-agenda-files)))
         (todo "REVIEW"
               ((org-agenda-overriding-header "In Review")
                (org-agenda-files org-agenda-files)))
         (todo "PLAN"
               ((org-agenda-overriding-header "In Planning")
                (org-agenda-todo-list-sublevels nil)
                (org-agenda-files org-agenda-files)))
         (todo "BACKLOG"
               ((org-agenda-overriding-header "Project Backlog")
                (org-agenda-todo-list-sublevels nil)
                (org-agenda-files org-agenda-files)))
         (todo "READY"
               ((org-agenda-overriding-header "Ready for Work")
                (org-agenda-files org-agenda-files)))
         (todo "ACTIVE"
               ((org-agenda-overriding-header "Active Projects")
                (org-agenda-files org-agenda-files)))
         (todo "COMPLETED"
               ((org-agenda-overriding-header "Completed Projects")
                (org-agenda-files org-agenda-files)))
         (todo "CANC"
               ((org-agenda-overriding-header "Cancelled Projects")
                (org-agenda-files org-agenda-files)))))))

    ;; Org Capture Templates! ----
    ;; (basically quickly add new entries mindlessly)
    (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp "~/org/agenda/agenda.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

        ("j" "Journal Entries")
        ("jj" "Journal" entry
             (file+olp+datetree "~/org/agenda/journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)

        ("jm" "Meeting" entry
             (file+olp+datetree "~/org/agenda/journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

        ("w" "Workflows")
        ("we" "Checking Email" entry (file+olp+datetree "~/org/agenda/journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

        ("m" "Metrics Capture")
        ("mw" "Weight" table-line (file+headline "~/org/agenda/metrics.org" "Weight")
         "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    ;; set up org-fonts
    (ri/org-font-setup))

#+end_src

*Keybinds:*

#+begin_src emacs-lisp

  ;; keybinds! -----

  ;; mostly just an example
  (define-key global-map (kbd "C-c j")
    (lambda () (interactive) (org-capture nil "jj")))

  ;; org-agenda leader keybinds (create a separate section?
  (ri/leader-keys
    "oa"  '(:ignore t :which-key "org-agenda")
    "oaa" '(org-agenda :whihc-key "agenda-commands")
    "oas" '(org-agenda-list :which-key "agenda-schedule")
    "oat" '(org-todo-list :which-key "todo-list")
    "oac" '(org-capture :which-key "org-capture")
    "oar" '(org-refile :which-key "org-refile")) ; put refile in org-mode-map?

  (ri/leader-keys
    :keymaps 'org-mode-map
    "md"  '(:ignore t :which-key "date/schedule")
    "mds" 'org-schedule
    "mdd" 'org-deadline
    "mdt" 'org-time-stamp
    "mt" '(org-todo :which-key "todo state set")
    "mq" '(org-set-tags-command :which-key "set tags menu")
    "mQ" '(counsel-org-tag :which-key "set tags list menu")
    "mp" '(org-set-property :which-key "set property")
    "me" '(org-set-effort :which-key "set effort"))
  ; C-c org schedule and deadline and time-stamp and org-tags, etc
  ; for tag multi-add alt-enter!

#+end_src

** bullets

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    ;(org-bullets-bullet-list '("⁖" "◉" "○" "✸" "✿")))
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  ;; replace list hyphen with dot
  ;(font-lock-add-keywords 'org-mode
  ;                        '(("^ *\\([-]\\) "
  ;                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

#+end_src

** side-padding

#+begin_src emacs-lisp

  ;; visual-fill-mode (padding)
  (defun ri/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . ri/org-mode-visual-fill)
    :config
    (setq visual-fill-column-enable-sensible-window-split nil))

#+end_src

** org-babel

code blocks and stuff

*** babel languages

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

*** structure templates

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("un" . "src conf-unix")))

#+end_src

*** auto-tangle

#+begin_src emacs-lisp

  ;; org-babel (tangle n stuff)
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun ri/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name "~/.dotfiles/.emacs.gnu/"))
      ;;                                  ^ Formerly user-emacs-directory (now .cache/emacs/)
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'ri/org-babel-tangle-config)))

  (ri/leader-keys
    "ob"  '(:ignore t :which-key "org-babel")
    "obt" '(org-babel-tangle :which-key "tangle")
    "obe" '(org-babel-execute-src-block :which-key "org-babel-execute-src-block"))

#+end_src

** table of contents

https://github.com/snosov1/toc-org

#+begin_src emacs-lisp

  (use-package toc-org
    :hook (org-mode . toc-org-mode))

#+end_src

* Development

** lsp-mode

https://emacs-lsp.github.io/lsp-mode/

Cool commands:
+ lsp-find-definition
+ lsp-find-references
  + lsp-ui-peek-find-references
  + lsp-treemacs-references
+ lsp-rename
+ flymake-show-buffer-diagnostics
+ lsp-execute-code-actions
+ lsp-format-buffer
+ lsp-ui-doc-focus-frame
+ lsp-ivy-workspace-symbol
  + lsp-ivy-global-workspace-symbol
+ lsp-treemacs-symbols

#+begin_src emacs-lisp

  ;; breadcrumb automatically enables...
  ;; also "file symbols" is already default args...
  (defun ri/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols)))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . ri/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t)
    (message "lsp-mode loaded!"))

  ;; change these later...
  ;; prefix is the keys that come before?!?!
  ;; maybe i just don't have the right packages to make lsp-mode-map
  ;(ri/ctrl-c-keys
  ;; (general-define-key
  ;;   :keymaps 'lsp-mode-map
  ;;   :prefix lsp-keymap-prefix
  ;;   "l"   '(:ignore t :which-key "lsp")
  ;;   "lg"  '(:ignore t :which-key "find")
  ;;   "lgd" 'lsp-find-definition
  ;;   "lgr" 'lsp-find-references))

  ;; ;; maybe 
  ;; ;
                                          ; can't define same keys twice? naw.
  ;; ok what the heck
  ;; (ri/leader-keys
  ;;   :keymaps 'lsp-mode-map
  ;;   "ml"  '(:ignore t :which-key "lsp-find")
  ;;   "mgd" '(lsp-find-definition :wk "definition")
  ;;   "mgr" '(lsp-find-references :wk "references")
  ;;   "mrr" '(lsp-rename :wk "rename all"))

#+end_src

*** lsp-ui

https://emacs-lsp.github.io/lsp-ui/

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom ;; defcustom !!
    (lsp-ui-doc-position 'bottom))

#+end_src

*** lsp-treemacs

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

*** lsp-ivy

special ivy search functionality for lsp
+ lsp-ivy-workspace-symbol

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :after lsp)

#+end_src

** languages

*** Rust

https://robert.kra.hn/posts/rust-emacs-setup/

most rustic features are accessible with C-c C-c
|-------------+-----------|
| C-c C-c C-r | cargo run |
| C-c C-p     | popup     |
|             |           |


#+begin_src emacs-lisp

  ;; rust-analyzer required. gnu guix package?
  (use-package rustic
    ;:ensure t ;; no need *
    :hook (rust-mode . lsp-deferred)
    :config
    (setq rustic-format-on-save nil)

    ;; lsp-mode ----
    (lsp-rust-analyzer-cargo-watch-command "check")
    ;; enable / disable the hints as you prefer:
    (lsp-rust-analyzer-server-display-inlay-hints nil)
    (lsp-rust-analyzer-display-lifetime-elision-hints-enable "never") ; skip_trivial
    (lsp-rust-analyzer-display-chaining-hints nil)
    (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil) ; def nil
    (lsp-rust-analyzer-display-closure-return-type-hints nil)
    (lsp-rust-analyzer-display-parameter-hints nil) ; def nil
    (lsp-rust-analyzer-display-reborrow-hints "never")

    ;; lsp-ui ----
    (lsp-ui-peek-always-show nil)
    (lsp-ui-sideline-show-hover nil)
    (lsp-ui-doc-enable t))

#+end_src

*** Python

#+begin_src emacs-lisp

  (use-package python-mode
    ;:ensure t ;; no need *
    :hook (python-mode . lsp-deferred)
    :custom
     ;; NOTE: Set these if Python 3 is called "python3" on your system!
    ;; (python-shell-interpreter "python3")
    ;; (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))

#+end_src

** company mode

another completion framework similar to ivy.
code completion in lsp-mode.

#+begin_src emacs-lisp

  (use-package company
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))
    :config
    ;; fixes evil-normal and cancel company autocomplete when escape
    ;; doesn't work if escape hit very quickly
    (add-hook 'company-mode-hook
     (lambda ()
       (add-hook 'evil-normal-state-entry-hook
                 (lambda ()
                   (company-abort)))))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** projectile

project management
bound to C-p
dir-locals are pretty cool
learn more about projectile for better project management

#+begin_src emacs-lisp

  ;; projectile
  ;; (project management)
  ;; (bound to C-p)
  ;; (dir-locals are pretty cool)
  ;; (learn more about projectile for better project management)
  (use-package projectile
    ;:defer 0
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy)) ;; by default auto
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Programming/code")
      (setq projectile-project-search-path '("~/Programming/code")))
    (setq projectile-switch-project-action #'projectile-dired))

  ;; counsel-projectile
  ;; (more options in M-o... already installed?)
  ;; (counsel-projectile-rg + M-o for a massive search in project)
  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

  (ri/leader-keys
    "p"  '(:ignore t :which-key "project")
    "pp" 'projectile-command-map)

#+end_src

** magit

#+begin_src emacs-lisp

  ;; magit
  ;; (add several links...)
  ;; (magit-status is C-x g)
  ;; (tab to see diff of files)
  ;; (hunks, "?" for all commands, C-c C-k to quit commit, push to remote, ssh?)
  ;; (learn more about magit...)
  (use-package magit
    :commands magit-status
    :custom
    ;; what does this do? fullscreen?
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (ri/leader-keys
    "g"  '(:ignore t :which-key "magit")
    "gg" '(magit-status :which-key "magit")) ; (same as magit)

  ;; forge
  ;; (run forge-pull in a repo to pull down)
  ;; (pull down all issues, pull-reqs, etc)
  ;; (need to create a token first, then put in .authinfo)
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)

#+end_src

** Commenting

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

* Terminal

** term-mode

term works on basically any device.

next and previous prompts:
+ C-c C-n
+ C-c C-p
+ [ [
+ ] ]

toggle between char and line mode:
+ C-c C-k
+ C-c C-j

if type in char and make evil edits in line mode, does not update.
- consider disabling evil completely while in term, and use zsh's vim?

#+begin_src emacs-lisp

  (use-package term
    :commands term
    :config
    (setq explicit-shell-file-name "zsh")
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

#+end_src

*** more colors

makes ranger work.
(depends on ncurses)

#+begin_src emacs-lisp

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

*** ansi-term

basically the same as term but automatically renames buffers so you can spawn a bunch of them.
also prefix key changed from C-c to C-x.

** vterm

(depends on cmake, libtool-bin, and libvterm (and gcc-toolchain))

maybe try disabling evil in here? actually, it works in bash! but why no zsh?

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    ;; vv already set vv
    ;;(setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
    (setq vterm-shell "bash")
    (setq vterm-max-scrollback 10000))

#+end_src

** shell-mode

in between system shell and emacs...
- kinda broken
- can use evil editing
- counsel-shell-history

- M-p
- M-n

- not good, but works great on windows...

** shell-pop

Hit s-<return> to bring up scratchpad terminal.

https://github.com/kyagi/shell-pop-el

#+begin_src emacs-lisp

  (use-package shell
    :commands shell-pop
    :custom
    (shell-pop-default-directory "/home/mio")
    (shell-pop-shell-type (quote ("vterm" "*vterm*" (lambda nil (vterm shell-pop-term-shell)))))
    (shell-pop-term-shell "/bin/zsh")
    (shell-pop-universal-key "C-t")
    (shell-pop-window-size 40)
    (shell-pop-window-position "bottom"))

#+end_src

** Eshell

fix neofetch
+ C-r

#+begin_src emacs-lisp

  ;; eshell config
  (defun ri/configure-eshell ()
    ;; Save command history when commands are entered.
    ;;   Commands usually don't save until close, so if crashes, loses all progress.
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    ;; fixes the issue with cursor going to the beginning... fixed?
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  ;; themes
  (use-package eshell-git-prompt
    :after eshell)

  (use-package eshell
    :hook (eshell-first-time-mode . ri/configure-eshell)
    :config
    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim" "ssh")))

    (eshell-git-prompt-use-theme 'powerline))

  (ri/leader-keys
    "ot" '(vterm :which-key "vterm")
    "oe" '(eshell :which-key "eshell"))

#+end_src

* Files

file management, etc

#+begin_src emacs-lisp

  (ri/leader-keys
    "f"  '(:ignore t :which-key "files")
    "fr" '(counsel-recentf :which-key "recent files")
    "ff" '(find-file :which-key "find-file")
    "fp" '(lambda () (interactive)
           (find-file (expand-file-name "~/.emacs.gnu/"))
             :which-key "open Emacs.org"))

#+end_src

** Dired

- Keybinds:
 |-----+------------+---+---------+----------------------+---+------+---------------------|
 |     | Marking    |   |         | Open/view/quit       |   |      | Copying/deleting/   |
 |     |            |   |         |                      |   |      | compressing         |
 |-----+------------+---+---------+----------------------+---+------+---------------------|
 | J   | search     |   | <ret>   | open file            |   | C    | copy file           |
 | m   | mark       |   | g o     | view file            |   | R    | rename/Move         |
 | %   | mark regex |   | S-<ret> | open in split window |   | % R  | rename regex        |
 | \*  | mark type  |   | M-<ret> | view file (scan)     |   | d/x  | delete selection    |
 | t   | inverts    |   | (    \) | hide info            |   | D    | delete/Trash file   |
 | u/U | unmark     |   | g r     | refresh dired        |   | Z    | compress/uncompress |
 | k/K | kill       |   | C-M-J   | ivy-immediate-done   |   | c    | compress advanced   |
 |     |            |   | H       | show/hide dots       |   |      | create empty file   |
 |     |            |   |         |                      |   |      |                     |
 |-----+------------+---+---------+----------------------+---+------+---------------------|
 |     |            |   |         |                      |   |      |                     |
 |-----+------------+---+---------+----------------------+---+------+---------------------|
 |     | Others     |   |         | Misc                 |   |      | Regex               |
 |-----+------------+---+---------+----------------------+---+------+---------------------|
 | T   | timestamp  |   | C-x C-q | Read only mode (ZZ)  |   | \&   | previous expression |
 | M   | -rw-r--r-- |   | &       | run program on file  |   | \1   |                     |
 | O   | owner      |   | I       | appends dired buffer |   | %s// |                     |
 | G   | group      |   |         |                      |   |      |                     |
 | S   | symlink    |   |         |                      |   |      |                     |
 | L   | load lisp  |   |         |                      |   |      |                     |
 |     |            |   |         |                      |   |      |                     |
 |-----+------------+---+---------+----------------------+---+------+---------------------|





#+begin_src emacs-lisp

  ;; dired 
  (use-package dired
    :ensure nil ; make sure use-package doesn't try to install it.
    :commands (dired dired-jump) ; defer loading of this config until a command is executed.
    :bind ("C-x C-j" . dired-jump)
    :custom
    (dired-listing-switches "-agho --group-directories-first")
    (dired-dwim-target t) ; auto select dir to move to if another dired window open.
    (delete-by-moving-to-trash t)
    ;;(dired-compress-files-alist) ; add more file types to compression.
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer
      "f" 'dired-create-empty-file))
    ;;     ^ Might not work if using two dired windows! (dired-up-directory, dired-find-file)

  ;; provides dired-single commands
  ;; HAS TO COME AFTER dired because using ":after dired"
  (use-package dired-single
    :after dired)

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    (setq dired-open-extensions
      '(("mkv" . "mpv")
        ("png" . "feh"))))

  (use-package dired-hide-dotfiles
    :commands (dired dired-jump)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

  (defun my-dired-mode-hook ()
    "My `dired` mode hook."
    ;; hide dotfiles by default
    (dired-hide-dotfiles-mode))
  ;
  (add-hook 'dired-mode-hook #'my-dired-mode-hook)

#+end_src

*Leader keys:*

#+begin_src emacs-lisp

  (ri/leader-keys
    "d"  '(:ignore t :which-key "dired")
    "dd" 'dired
    "dj" 'dired-jump)

#+end_src

* Programs

** ement

a matrix client for emacs

#+begin_src emacs-lisp

  ;; matrix client
  (use-package ement
    :commands ement)

#+end_src

** elfeed

an rss feed reader for emacs

#+begin_src emacs-lisp

  ;; rss
  ;; maybe don't need, phone is enough?
  ;; maybe syncthing and import from database?
  ;; dont use commands elfeed, scan at startup?
  (use-package elfeed
    :commands elfeed)

#+end_src

** erc

an irc client for emacs

https://github.com/alphapapa/ement.el

#+begin_src emacs-lisp

  ;; erc
  ;; make erc start after startup?
  (use-package erc
    :commands erc)

#+end_src

* Applications

unix applications go here
+ firejail

** Xmodmap

#+begin_src conf-unix :tangle ~/.dotfiles/.Xmodmap

  clear lock
  keycode 66 = Control_L Escape
  
#+end_src

** mpv

#+begin_src conf-unix :tangle ~/.dotfiles/.config/mpv/mpv.conf

  #

#+end_src

** zshrc

#+begin_src conf-unix :tangle ~/.dotfiles/.zshrc

  #
  ## config for .zshrc
  #

  # Enable colors and change prompt:
  autoload -U colors && colors
  PS1="%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M %{$fg[magenta]%}%~%{$fg[red]%}]%{$reset_color%}$%b "

  # History in cache directory:
  HISTFILE=~/.cache/zsh/history		# note: do "mkdir -p ~/.cache/zsh/" first!
  HISTSIZE=100000
  SAVEHIST=100000

  # Basic auto/tab complete:
  autoload -U compinit
  zstyle ':completion:*' menu select
  zmodload zsh/complist
  compinit
  _comp_options+=(globdots)		# Include hidden files.

  #--------------------------------------------------------------

  # vi mode
  bindkey -e # emacs, not -v (vim)
  # export KEYTIMEOUT=1

  # # Change cursor shape for different vi modes.
  # function zle-keymap-select () {
  #     case $KEYMAP in
  #         vicmd) echo -ne '\e[1 q';;      # block
  #         viins|main) echo -ne '\e[5 q';; # beam
  #     esac
  # }
  # zle-line-init() {
  #     zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
  #     echo -ne "\e[5 q"
  # }

  # zle -N zle-keymap-select
  # zle -N zle-line-init
  # echo -ne '\e[5 q' # Use beam shape cursor on startup.
  # preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.


  #--------------------------------------------------------------

  #
  ## End of main
  #

  # Export 
  export HISTORY_IGNORE="(ls|cd|pwd|exit|doas reboot|history|cd -| cd ..)"
  #export EDITOR="emacsclient -t -a ''"
  #export VISUAL="emacsclient -c -a emacs"
  #export VISUAL="emacsclient -t -a ''"
  export VISUAL="emacsclient"
  export EDITOR="$VISUAL"
  #export MANPAGER="sh -c 'col -bx | bat -l man -p'"


  # Import aliases
  [ -f "$HOME/.aliasrc" ] && source "$HOME/.aliasrc"

  # syntax highlighting plugin (https://github.com/zsh-users/zsh-syntax-highlighting)
  source /usr/share/zsh/site-functions/zsh-syntax-highlighting.zsh

  # Disable bell
  unsetopt BEEP


  # vterm integration

  vterm_printf() {
      if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ]); then
          # Tell tmux to pass the escape sequences through
          printf "\ePtmux;\e\e]%s\007\e\\" "$1"
      elif [ "${TERM%%-*}" = "screen" ]; then
          # GNU screen (screen, screen-256color, screen-256color-bce)
          printf "\eP\e]%s\007\e\\" "$1"
      else
          printf "\e]%s\e\\" "$1"
      fi
  }


#+end_src

** Firejail

*** disable-common.local

#+begin_src conf-unix :tangle ~/.dotfiles/.config/firejail/disable-common.local

  blacklist ${HOME}/Documents/secure
  blacklist ${HOME}/Public/School/Important-docs

#+end_src

*** keepassxc.local

#+begin_src conf-unix :tangle ~/.dotfiles/.config/firejail/keepassxc.local
  
  ## Browser Integration
  # So can access database and keyfile
  noblacklist ${HOME}/Documents/secure
  # Allow browser profile, required for browser integration (i think)
  noblacklist ${HOME}/.librewolf
  # On github wiki for needed
  noblacklist ${RUNUSER}/app
  #
  ##

  ## ETC
  # 
  #dbus-user.talk org.freedesktop.secrets
  #
  dbus-user.talk org.freedesktop.Notifications
  #
  ##

#+end_src

*** librewolf.local

#+begin_src conf-unix :tangle ~/.dotfiles/.config/firejail/librewolf.local

  #whitelist ${RUNUSER}/run/user/$UID/librewolf

  ## KeepassXC browser integration
  noblacklist ${RUNUSER}/app
  whitelist ${RUNUSER}/kpxc_server
  whitelist ${RUNUSER}/org.keepassxc.KeePassXC.BrowserServer
  #
  noblacklist ${HOME}/.mozilla
  whitelist ${HOME}/.mozilla
  #
  noblacklist ${HOME}/Documents/secure
  #

  ## ETC
  #
  # native notifications
  dbus-user.talk org.freedesktop.Notifications
  #
  # inhibiting screensavers
  dbus-user.talk org.freedesktop.ScreenSaver

#+end_src

*** steam.local

#+begin_src conf-unix :tangle ~/.dotfiles/.config/firejail/steam.local
  
  #ignore seccomp

  # private-bin is disabled while in testing, but is known to work with multiple games.
  # Add the next line to your steam.local to enable private-bin.
  #private-bin awk,basename,bash,bsdtar,bzip2,cat,chmod,cksum,cmp,comm,compress,cp,curl,cut,date,dbus-launch,dbus-send,desktop-file-edit,desktop-file-install,desktop-file-validate,dirname,echo,env,expr,file,find,getopt,grep,gtar,gzip,head,hostname,id,lbzip2,ldconfig,ldd,ln,ls,lsb_release,lsof,lspci,lz4,lzip,lzma,lzop,md5sum,mkdir,mktemp,mv,netstat,ps,pulseaudio,python*,readlink,realpath,rm,sed,sh,sha1sum,sha256sum,sha512sum,sleep,sort,steam,steamdeps,steam-native,steam-runtime,sum,tail,tar,tclsh,test,touch,tr,umask,uname,update-desktop-database,wc,wget,wget2,which,whoami,xterm,xz,zenity

  # To view screenshots add the next line to your steam.local.
  #private-bin eog,eom,gthumb,pix,viewnior,xviewer

#+end_src

* Special

Not sure if this works or not lol

#+begin_src emacs-lisp

  ;; Keep customization settings in a temporary file (does this even work?)
  (setq custom-file
        (if (boundp 'server-socket-dir)
            (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)

#+end_src

* Runtime performance

#+begin_src emacs-lisp

  ;; make gc pauses faster by decreaseing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))
  
#+end_src

