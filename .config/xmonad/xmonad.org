#+TITLE: Xmonad Configuration
#+PROPERTY: header-args :tangle xmonad.hs
#+auto_tangle: t
#+STARTUP: fold

* Table of Contents :toc:
- [[#about-this-config][About This Config]]
- [[#imports][Imports]]
- [[#variables][Variables]]
- [[#keybinds][Keybinds]]
- [[#mymanagehook][myManageHook]]
- [[#myscratchpads][myScratchpads]]
- [[#mylayouthook][myLayoutHook]]
- [[#mystartuphook][myStartupHook]]
- [[#myloghook][myLogHook]]
- [[#myxmobarpp][myXmobarPP]]
- [[#main][Main]]
- [[#useful-example-1][Useful Example 1]]
- [[#useful-notes][Useful Notes]]

* About This Config
This is the main xmonad config.
Written in org mode, this will be edited to edit the main xmonad.hs file.

* Imports
#+begin_src haskell
-- XMONAD CONFIG

--
-- [ Imports ] --------------------------------------------------------
--

import XMonad

import XMonad.Hooks.EwmhDesktops --ewmh

import XMonad.Hooks.DynamicLog --deprecated compatibility wrapper for StatusBar
import XMonad.Hooks.StatusBar --output info to xmobar
import XMonad.Hooks.StatusBar.PP --pretty print xmobar
import XMonad.Hooks.ManageDocks (manageDocks) --no overlap bar, manage bar
import XMonad.Hooks.InsertPosition --spawn below
import XMonad.Hooks.ManageHelpers (isDialog) --if-do, helpers for ManageHook
import XMonad.Hooks.RefocusLast (refocusLastLayoutHook, toggleFocus) --toggle to previous window

import XMonad.Util.EZConfig (additionalKeysP) --keys
import XMonad.Util.Ungrab --release keyboard grab
import XMonad.Util.SpawnOnce (spawnOnce) --only on startup and ignore again
import XMonad.Util.Loggers --ppExtras extra formatting + loggers
import XMonad.Util.NamedScratchpad --scratchpad(optimize params)

--                             toggle    next    prev    moveTo  Data Next/Prev          Not          isEmpty  WinMoveToAdjacent
import XMonad.Actions.CycleWS (toggleWS, nextWS, prevWS, moveTo, Direction1D(Next,Prev), WSType(Not), emptyWS, shiftToNext, shiftToPrev)
import XMonad.Actions.WindowBringer (gotoMenu) --for search for windows dmeunu
import XMonad.Actions.UpdatePointer --for warp clone

import XMonad.Layout.NoBorders (smartBorders) --smartborders
import XMonad.Layout.ToggleLayouts (toggleLayouts, ToggleLayout(Toggle)) --for fullscreen toggle

import qualified XMonad.StackSet as W

#+end_src
* Variables
#+begin_src haskell

--
-- [ Settings ] -------------------------------------------------------
--

myTerminal :: String
myTerminal = "urxvtc"

myFocusFollowsMouse :: Bool
myFocusFollowsMouse = True

-- note: workspace 0 added. access to implemented through keybinds below.
myWorkspaces = ["1","2","3","4","5","6","7","8","9","0"]

myNormalColor :: String
myNormalColor = "#040a0a"

myFocusedColor :: String
myFocusedColor = "#1e9c8f"
-- #1e9c8f
-- #157b8f
--

#+end_src
* Keybinds
#+begin_src haskell

--
-- [ Keys ] -----------------------------------------------------------
--

myKeys :: [(String, X ())]
myKeys =
  [ ("M-<Return>"  , spawn (myTerminal) )
  , ("M-r"   , spawn "xmonad --recompile; killall xmobar; xmonad --restart" )

  -- spawn actions/macros with keybinds
  , ("M-S-z", spawn "xscreensaver-command -lock")
  , ("M-C-s", unGrab *> spawn "scrot -s -f -l style=dash '/home/senko/Pictures/Screenshots/%F-%T-$wx$h.png' -e 'xclip -selection clipboard -target image/png -in $f'")
  , ("M-v v", spawn "pomo.sh start"       )
  , ("M-v s", spawn "pomo.sh stop"        )
  , ("M-v p", spawn "pomo.sh pause"       )
  , ("M-v r", spawn "pomo.sh restart"     )

  -- spawn applications using emacs-keybindings
  , ("M-o l"  , spawn "librewolf"         )
  , ("M-o d"  , spawn "discord"           )
  , ("M-o s"  , spawn "steam"             )
  , ("M-o m"  , spawn "spotify"           )
  , ("M-o p"  , spawn "keepassxc"         )
  , ("M-o k"  , spawn "krita"             )
  , ("M-o M-o" , spawn "emacsclient -c -a ''")

  -- spawn scratchpads
  , ("M-M1-t" , namedScratchpadAction myScratchpads "terminal")
  , ("M-M1-n" , namedScratchpadAction myScratchpads "hyfetch")
  , ("M-M1-h" , namedScratchpadAction myScratchpads "htop")

  -- << workspaces, layout, and windows >>
  -- workspaces
  , ("M-<Tab>", toggleWS      )
  , ("M-n"  , toggleWS        )
  , ("M-l"  , nextWS          )
  , ("M-h"  , prevWS          )
  , ("M-u"  , moveTo Prev (Not emptyWS))
  , ("M-i"  , moveTo Next (Not emptyWS))
  -- layout
  , ("M-S-<Space>"  , sendMessage (Toggle "Full"))
  , ("M-S-u"  , sendMessage Shrink  )
  , ("M-S-i"  , sendMessage Expand  )
  -- window move workspace
  , ("M-S-h" , shiftToPrev)
  , ("M-S-l" , shiftToNext)
  -- window focus
  , ("M-m"  , toggleFocus)
  -- window move local
  , ("M-S-<Return>", windows W.swapMaster)
  , ("M-S-m"       , windows W.swapMaster)
  -- TEST
  , ("M-C-h" , moveTo Prev (emptyWS))
  , ("M-C-l" , moveTo Next (emptyWS))

  -- misc
  , ("M-b"   , gotoMenu )

  -- don't know what this does, move it elsewhere (originally M-n)
  , ("M-S-n"  , refresh  )

  -- system keys
  , ("<XF86MonBrightnessUp>"   , spawn "light -A 5")
  , ("<XF86MonBrightnessDown>" , spawn "light -U 5")
  , ("<XF86AudioRaiseVolume>"  , spawn "pactl set-sink-volume 0 +5%")
  , ("<XF86AudioLowerVolume>"  , spawn "pactl set-sink-volume 0 -5%")
  , ("<XF86AudioMute>"         , spawn "pactl set-sink-mute 0 toggle")

  -- view and shift to workspace 0
  , ("M-0"    , windows $ W.greedyView "0")
  , ("M-S-0"  , windows $ W.shift      "0")

  ]

#+end_src
* myManageHook
#+begin_src haskell

--
-- [ ManageHook ] -----------------------------------------------------
--

myManageHook :: ManageHook
myManageHook = composeAll
  [ className =? "Gimp"      --> doFloat
  , isDialog                 --> doFloat
  , className =? "librewolf" --> doShift ( myWorkspaces !! 2 )
--, className =? "discord"   --> doShift ( myWorkspaces !! 3 )
--, className =? "Steam"     --> doShift ( myWorkspaces !! 6 )
  , className =? "KeePassXC" --> doShift ( myWorkspaces !! 8 )
  , className =? "KeePassXC" <&&> resource =? "Dialog" --> doShift ( myWorkspaces !! 0)
  , className =? "krita"     --> doShift ( myWorkspaces !! 9 )
--doShift ( myWorkspaces !! W.currentTag)
  ]

#+end_src
* myScratchpads
#+begin_src haskell
myScratchpads :: [NamedScratchpad]
myScratchpads =
  [ NS "terminal" spawnTerm findTerm manageTerm
  , NS "hyfetch" spawnFetch findFetch manageFetch
  , NS "htop" spawnHtop findHtop manageHtop
  ]
 where
   -- "terminal"
   spawnTerm  = "urxvtc -name scratchpad"
   findTerm   = title =? "scratchpad"
   manageTerm = customFloating $ W.RationalRect l t w h
     where
       h = 0.6
       w = 0.5
       t = 0.75 -h
       l = 0.75 -w
   -- "hyfetch"
   spawnFetch  = "urxvtc -e hyfetch -name hyfetch"
   findFetch   = title =? "hyfetch"
   manageFetch = customFloating $ W.RationalRect l t w h
     where
       h = 0.6
       w = 0.5
       t = 0.75 -h
       l = 0.75 -w
   -- "htop"
   spawnHtop  = "urxvtc -e htop -name htop"
   findHtop   = title =? "htop"
   manageHtop = customFloating $ W.RationalRect l t w h
     where
       h = 0.6
       w = 0.5
       t = 0.75 -h
       l = 0.75 -w

#+end_src
* myLayoutHook
#+begin_src haskell

--
-- [ Layout ] ---------------------------------------------------------
--

--myLayout = smartBorders $ tiled ||| Mirror tiled ||| Full
myLayout = smartBorders $ toggleLayouts (Full) (tiled ||| Mirror tiled)
  where
    tiled   = Tall nmaster delta ratio
    nmaster = 1      -- Default number of windows in the master pane
    ratio   = 1/2    -- Default proportion of screen occupied by master pane
    delta   = 3/100  -- Percent of screen to increment by when resizing panes

#+end_src
* myStartupHook
#+begin_src haskell

--
-- [ Startup ] --------------------------------------------------------
--

myStartupHook :: X ()
myStartupHook = do
  spawn "killall trayer"
  spawn "sleep 0.5 && trayer --edge top --align right --SetDockType true --SetPartialStrut true --expand true --width 10 --transparent true --alpha 30 --tint 0x000000 --height 11"
--spawnOnce "xscreensaver -no-splash"

#+end_src
* myLogHook
#+begin_src haskell

--
-- [ LogHook ] --------------------------------------------------------
--

myLogHook :: X ()
myLogHook = updatePointer (0.5, 0.5) (0, 0)

#+end_src
* myXmobarPP
#+begin_src haskell

--
-- [ Xmobar ] ---------------------------------------------------------
--

myXmobarPP :: PP
myXmobarPP = def
{-    { ppSep             = magenta " â€¢ "
    , ppTitleSanitize   = xmobarStrip
    , ppCurrent         = wrap " " "" . xmobarBorder "Top" "#8be9fd" 2
    , ppHidden          = white . wrap " " ""
    , ppHiddenNoWindows = lowWhite . wrap " " ""
    , ppUrgent          = red . wrap (yellow "!") (yellow "!")
    , ppOrder           = \[ws, l, _, wins] -> [ws, l, wins]
    , ppExtras          = [logTitles formatFocused formatUnfocused]
    }
  where
    formatFocused   = wrap (white    "[") (white    "]") . magenta . ppWindow
    formatUnfocused = wrap (lowWhite "[") (lowWhite "]") . blue    . ppWindow

    -- | Windows should have *some* title, which should not not exceed a
    -- sane length.
    ppWindow :: String -> String
    ppWindow = xmobarRaw . (\w -> if null w then "untitled" else w) . shorten 30

    blue, lowWhite, magenta, red, white, yellow :: String -> String
    magenta  = xmobarColor "#ff79c6" ""
    blue     = xmobarColor "#bd93f9" ""
    white    = xmobarColor "#f8f8f2" ""
    yellow   = xmobarColor "#f1fa8c" ""
    red      = xmobarColor "#ff5555" ""
    lowWhite = xmobarColor "#bbbbbb" ""
-}

#+end_src
* Main
#+begin_src haskell

--
-- [ Main ] -----------------------------------------------------------
--

main :: IO ()
main = xmonad
  . ewmhFullscreen
  . ewmh
  . withEasySB (statusBarProp "xmobar ~/.config/xmobar/xmobarrc" (pure def)) toggleStrutsKey
  $ myConfig
  where
    toggleStrutsKey :: XConfig Layout -> (KeyMask, KeySym)
    toggleStrutsKey XConfig{ modMask = m } = (m.|.shiftMask, xK_t)

myConfig = def
  { modMask            = mod4Mask  -- Rebind Mod to the Super key
  , terminal           = myTerminal -- Set terminal
  , focusFollowsMouse  = myFocusFollowsMouse
  , workspaces         = myWorkspaces
  , normalBorderColor  = myNormalColor
  , focusedBorderColor = myFocusedColor
  , layoutHook         = refocusLastLayoutHook $ myLayout
  , manageHook         = namedScratchpadManageHook myScratchpads <> insertPosition Below Newer <> myManageHook <+> manageDocks
  , startupHook        = myStartupHook
  , logHook            = myLogHook
  } `additionalKeysP` myKeys

#+end_src
* Useful Example 1
-------------------------------------------------------------------
-- ctrl+F[1 .. ], Switch to workspace N
-- ctrl+shift+F[1 .. ], View to workspace N
-- meta+F[1 .. ], Move client to workspace N and follow
-- meta+shift+F[1 .. ], Move client to workspace N
-- alt+F[1 .. ], Swap with workspace N and follow
-- alt+shift+F[1 .. ], Swap with workspace N
[ ((m, k), windows $ f i)
    | (i, k) <- zip (workspaces conf) workspaceKeys
    , (f, m) <- [ (W.greedyView                   , controlMask)
                , (W.view                         , controlMask .|. shiftMask)
                , (liftM2 (.) W.greedyView W.shift, mod4Mask)
                , (W.shift                        , mod4Mask .|. shiftMask)
                , (swapWithCurrent                , mod1Mask)
                , (silentSwapWithCurrent          , mod1Mask .|. shiftMask)
                ]
]
++
-------------------------------------------------------------------
-- ctrl+meta+F[1 .. ], Switch to screen N
-- ctrl+meta+shift+F[1 .. ], Move client to screen N
-- alt+meta+F[1 .. ], Swap with screen N and follow
-- alt+meta+shift+F[1 .. ], Swap with screen N
[ ((m, k), screenWorkspace (S i) >>= flip whenJust (windows . f))
    | (i, k) <- zip [0 .. ] workspaceKeys
    , (f, m) <- [ (W.view               , controlMask .|. mod4Mask)
                , (W.shift              , controlMask .|. mod4Mask .|. shiftMask)
                , (swapWithCurrent      , mod1Mask .|. mod4Mask)
                , (silentSwapWithCurrent, mod1Mask .|. mod4Mask .|. shiftMask)
                ]
]
++
-------------------------------------------------------------------
-- ctrl+alt+[left,right], Switch to workspace to the left or right
-- meta+[left,right], Move window to left or right and follow
-- meta+shift+[left,right], Move window to left or right
-- alt+meta+[left,right], Swap with workspace to left or right and follow
-- alt+meta+shift+[left,right], Swap with workspace to left or right
[ ((m, xK_Left ), c)
    | (c, m) <- [ (prevWS               , controlMask .|. mod1Mask)
                , (shiftToPrev >> prevWS, mod4Mask)
                , (shiftToPrev          , mod4Mask .|. shiftMask)
                , (swapTo Prev          , mod1Mask .|. mod4Mask)
                , (swapTo Prev >> nextWS, mod1Mask .|. mod4Mask .|. shiftMask)
                ]
]
++
[ ((m, xK_Right),

c)
    | (c, m) <- [ (nextWS               , controlMask .|. mod1Mask)
                , (shiftToNext >> nextWS, mod4Mask)
                , (shiftToNext          , mod4Mask .|. shiftMask)
                , (swapTo Next          , mod1Mask .|. mod4Mask)
                , (swapTo Next >> prevWS, mod1Mask .|. mod4Mask .|. shiftMask)
                ]
]
* Useful Notes
+ set master and stack shifted slightly to the side?
